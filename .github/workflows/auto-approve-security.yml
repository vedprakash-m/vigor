---
name: Auto-Approve Security Enhancements

"on":
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  check-approval-eligibility:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'auto-approve') ||
      (github.event.action == 'labeled' &&
       github.event.label.name == 'auto-approve')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR details
        id: pr-details
        run: |
          # Get author and organization membership
          AUTHOR="${{ github.event.pull_request.user.login }}"

          # Check if author is in trusted contributors team
          REPO_OWNER="${{ github.repository_owner }}"
          TRUSTED_CONTRIBUTOR=$(gh api \
            /orgs/$REPO_OWNER/teams/trusted-contributors/memberships/$AUTHOR \
            -q '.state' 2>/dev/null || echo "none")

          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "trusted_contributor=$TRUSTED_CONTRIBUTOR" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check contributor history
        id: contributor-history
        run: |
          AUTHOR="${{ steps.pr-details.outputs.author }}"

          # Get contribution history
          AUTHORED_PRS=$(gh pr list --author $AUTHOR --state all \
            --repo ${{ github.repository }} --json number | jq length)
          MERGED_PRS=$(gh pr list --author $AUTHOR --state merged \
            --repo ${{ github.repository }} --json number | jq length)

          # Calculate metrics
          echo "authored_prs=$AUTHORED_PRS" >> $GITHUB_OUTPUT
          echo "merged_prs=$MERGED_PRS" >> $GITHUB_OUTPUT

          # Check if user is trusted based on history
          if [ "$MERGED_PRS" -ge 5 ]; then
            echo "trusted_by_history=true" >> $GITHUB_OUTPUT
          else
            echo "trusted_by_history=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check modified paths
        id: check-paths
        run: |
          # Get modified files in PR
          REPO="${{ github.repository }}"
          PR_NUM="${{ github.event.pull_request.number }}"
          MODIFIED_FILES=$(gh api \
            /repos/$REPO/pulls/$PR_NUM/files \
            -q '.[].filename')

          # Define sensitive path patterns
          SENSITIVE_PATHS=(
            "backend/core/"
            "backend/database/models"
            "backend/api/routes"
            "infrastructure/"
            ".github/workflows"
            "scripts/"
            "backend/alembic/"
            "package.json"
            "requirements.txt"
            "Dockerfile"
            ".env"
            "*.config.*"
          )

          # Define allowed paths for auto-approval
          SAFE_PATHS=(
            "frontend/src/components/"
            "frontend/src/styles/"
            "frontend/public/"
            "docs/"
            "*.md"
            "tests/"
            "*.test.*"
            "*.spec.*"
          )

          # Check files against patterns
          HAS_SENSITIVE=false
          HAS_ONLY_SAFE=true

          for file in $MODIFIED_FILES; do
            # Check if file matches any sensitive path
            for pattern in "${SENSITIVE_PATHS[@]}"; do
              if [[ "$file" == $pattern* || "$file" == *$pattern ]]; then
                echo "Sensitive file detected: $file"
                HAS_SENSITIVE=true
              fi
            done

            # Check if file is in safe paths
            IS_SAFE=false
            for pattern in "${SAFE_PATHS[@]}"; do
              if [[ "$file" == $pattern* || "$file" == *$pattern ]]; then
                IS_SAFE=true
                break
              fi
            done

            if [ "$IS_SAFE" = false ]; then
              HAS_ONLY_SAFE=false
            fi
          done

          echo "has_sensitive=$HAS_SENSITIVE" >> $GITHUB_OUTPUT
          echo "has_only_safe=$HAS_ONLY_SAFE" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check PR size
        id: check-size
        run: |
          # Count lines changed
          REPO="${{ github.repository }}"
          PR_NUM="${{ github.event.pull_request.number }}"
          PR_DIFF=$(gh api \
            /repos/$REPO/pulls/$PR_NUM \
            -H "Accept: application/vnd.github.v3.diff" | wc -l)

          echo "lines_changed=$PR_DIFF" >> $GITHUB_OUTPUT

          if [ "$PR_DIFF" -le 100 ]; then
            echo "small_pr=true" >> $GITHUB_OUTPUT
          else
            echo "small_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Make approval decision
        id: approval-decision
        run: |
          A="${{ steps.pr-details.outputs.trusted_contributor == 'active' }}"
          H="${{ steps.contributor-history.outputs.trusted_by_history }}"
          H_TRUE="true"
          if [[ $A == 'true' || $H == $H_TRUE ]]; then
            IS_TRUSTED='true'
          else
            IS_TRUSTED='false'
          fi
          HAS_SENSITIVE="${{ steps.check-paths.outputs.has_sensitive }}"
          HAS_ONLY_SAFE="${{ steps.check-paths.outputs.has_only_safe }}"
          SMALL_PR="${{ steps.check-size.outputs.small_pr }}"

          if [ "$IS_TRUSTED" = "true" ] && [ "$HAS_SENSITIVE" = "false" ] &&
             [ "$SMALL_PR" = "true" ]; then
            echo "auto_approve=true" >> $GITHUB_OUTPUT
            REASON="Trusted contributor with safe changes under 100 lines"
            echo "reason=$REASON" >> $GITHUB_OUTPUT
          elif [ "$HAS_ONLY_SAFE" = "true" ] && [ "$SMALL_PR" = "true" ]; then
            echo "auto_approve=true" >> $GITHUB_OUTPUT
            REASON="Only modifies safe paths and is under 100 lines"
            echo "reason=$REASON" >> $GITHUB_OUTPUT
          else
            echo "auto_approve=false" >> $GITHUB_OUTPUT
            if [ "$IS_TRUSTED" = "false" ]; then
              echo "reason=Contributor does not meet trust requirements" >> \
                $GITHUB_OUTPUT
            elif [ "$HAS_SENSITIVE" = "true" ]; then
              echo "reason=PR modifies sensitive paths" >> $GITHUB_OUTPUT
            elif [ "$SMALL_PR" = "false" ]; then
              echo "reason=PR is too large (over 100 lines)" >> $GITHUB_OUTPUT
            else
              echo "reason=Multiple policy violations" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Process auto-approval
        run: |
          AUTO_APPROVE="${{ steps.approval-decision.outputs.auto_approve }}"
          REASON="${{ steps.approval-decision.outputs.reason }}"
          PR_NUM="${{ github.event.pull_request.number }}"
          if [[ "$AUTO_APPROVE" == "true" ]]; then
            echo "✅ PR is eligible for auto-approval: $REASON"

            # Add approval comment
            gh pr review $PR_NUM --approve \
              --body "✅ **Auto-approved:** $REASON"
          else
            echo "❌ PR is not eligible for auto-approval: $REASON"

            # Remove auto-approve label
            gh pr edit $PR_NUM --remove-label "auto-approve"

            # Add comment explaining why
            COMMENT_BODY="❌ **Auto-approval rejected:** $REASON"
            COMMENT_BODY="$COMMENT_BODY\n\nThis PR requires manual review."
            gh pr comment $PR_NUM --body "$COMMENT_BODY"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
