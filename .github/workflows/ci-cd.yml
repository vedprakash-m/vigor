name: Vigor CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  CONTAINER_REGISTRY_USERNAME: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Security and code quality checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend tests and build
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run linting
        run: |
          pip install black flake8 isort
          black --check .
          flake8 .
          isort --check-only .

      - name: Run type checking
        run: |
          pip install mypy
          mypy . --ignore-missing-imports

      - name: Run tests
        env:
          SECRET_KEY: test-secret-key-for-testing-only
          DATABASE_URL: sqlite:///test.db
          LLM_PROVIDER: fallback
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

      - name: Build Docker image
        run: |
          docker build -t vigor-backend:${{ github.sha }} -f Dockerfile .

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-backend \
            -e SECRET_KEY=test \
            -e DATABASE_URL=sqlite:///test.db \
            -e LLM_PROVIDER=fallback \
            -p 8000:8000 \
            vigor-backend:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-backend

  # Frontend tests and build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:ci

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1

  # Infrastructure validation
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform

  # Deployment to Azure
  deploy:
    name: Deploy to Azure
    needs: [security, backend, frontend, terraform]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || github.event.inputs.environment }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Init
        working-directory: ./infrastructure/terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=vigor-${{ matrix.environment }}.terraform.tfstate"

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform
        run: |
          terraform plan \
            -var="environment=${{ matrix.environment }}" \
            -var="postgres_admin_password=${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
            -var="secret_key=${{ secrets.SECRET_KEY }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
            -var="perplexity_api_key=${{ secrets.PERPLEXITY_API_KEY }}" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        working-directory: ./infrastructure/terraform
        id: terraform
        run: |
          echo "container_registry=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "app_service=$(terraform output -raw app_service_name)" >> $GITHUB_OUTPUT
          echo "backend_url=$(terraform output -raw backend_url)" >> $GITHUB_OUTPUT
          echo "frontend_url=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Docker Image
        working-directory: ./backend
        run: |
          # Login to Azure Container Registry
          echo ${{ secrets.CONTAINER_REGISTRY_PASSWORD }} | docker login ${{ steps.terraform.outputs.container_registry }} \
            --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin

          # Build and tag image
          docker build -t ${{ steps.terraform.outputs.container_registry }}/vigor-backend:${{ github.sha }} \
                       -t ${{ steps.terraform.outputs.container_registry }}/vigor-backend:latest \
                       -f Dockerfile .

          # Push images
          docker push ${{ steps.terraform.outputs.container_registry }}/vigor-backend:${{ github.sha }}
          docker push ${{ steps.terraform.outputs.container_registry }}/vigor-backend:latest

      - name: Deploy Backend to App Service
        run: |
          az webapp config container set \
            --name ${{ steps.terraform.outputs.app_service }} \
            --resource-group ${{ steps.terraform.outputs.resource_group }} \
            --docker-custom-image-name ${{ steps.terraform.outputs.container_registry }}/vigor-backend:${{ github.sha }}

          # Restart the app service to pull the new image
          az webapp restart \
            --name ${{ steps.terraform.outputs.app_service }} \
            --resource-group ${{ steps.terraform.outputs.resource_group }}

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Deploy Frontend to Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: 'frontend'
          api_location: ''
          output_location: 'dist'

  # Health checks and smoke tests
  health-check:
    name: Health Check
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Health Check Backend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy.outputs.backend_url }}/health)
          if [ $response != "200" ]; then
            echo "Backend health check failed with status: $response"
            exit 1
          fi
          echo "Backend health check passed"

      - name: Health Check Frontend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy.outputs.frontend_url }})
          if [ $response != "200" ]; then
            echo "Frontend health check failed with status: $response"
            exit 1
          fi
          echo "Frontend health check passed"

      - name: API Smoke Test
        run: |
          # Test user registration
          response=$(curl -s -X POST ${{ needs.deploy.outputs.backend_url }}/auth/register \
            -H "Content-Type: application/json" \
            -d '{"username":"test","email":"test@example.com","password":"testpass123"}' \
            -w "%{http_code}")
          
          if [[ $response != *"200"* ]] && [[ $response != *"201"* ]] && [[ $response != *"409"* ]]; then
            echo "API smoke test failed"
            exit 1
          fi
          echo "API smoke test passed"

  # Notification
  notify:
    name: Notify Deployment
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Backend: ${{ needs.deploy.outputs.backend_url }}"
          echo "Frontend: ${{ needs.deploy.outputs.frontend_url }}"

      - name: Notify Failure
        if: needs.deploy.result == 'failure' || needs.health-check.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1

# Manual cleanup workflow
  cleanup:
    name: Cleanup Resources (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'cleanup'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Destroy
        working-directory: ./infrastructure/terraform
        run: |
          terraform init
          terraform destroy -auto-approve \
            -var="environment=dev" \
            -var="postgres_admin_password=dummy" \
            -var="secret_key=dummy" \
            -var="admin_email=dummy@example.com" 