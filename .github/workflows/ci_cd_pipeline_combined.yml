name: Vigor CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write # Required for OIDC authentication

env:
  REGISTRY: vigoracr.azurecr.io
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  RESOURCE_GROUP: "vigor-rg"
  USE_DIRECT_DEPLOYMENT: "true" # Set to true for App Service + Functions
  FUNCTION_APP_NAME: "vigor-ai-functions"
  STATIC_WEBAPP_NAME: "vigor-static-webapp"

jobs:
  # Initial validation job that must pass for pipeline to continue
  prerequisites:
    name: Prerequisites & Validation
    runs-on: ubuntu-latest
    outputs:
      has-required-secrets: ${{ steps.export-secrets.outputs.has-required-secrets }}
      has-optional-apis: ${{ steps.export-secrets.outputs.has-optional-apis }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set required secret values
        id: export-secrets
        run: |
          # Check required Azure authentication secrets
          has_required=true

          # Check Azure authentication secrets
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] || [ -z "${{ secrets.AZURE_TENANT_ID }}" ] || [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "‚ùå ERROR: Missing required Azure authentication secrets"
            has_required=false
          fi

          # Check required application secrets
          if [ -z "${{ secrets.POSTGRES_ADMIN_PASSWORD }}" ] || [ -z "${{ secrets.SECRET_KEY }}" ] || [ -z "${{ secrets.ADMIN_EMAIL }}" ]; then
            echo "‚ùå ERROR: Missing required application secrets"
            has_required=false
          fi

          # Check optional API keys
          has_apis=false

          # Set dummy value for APIs check (we'll just check if any API key is available)
          # We don't need to check individual keys since we're just checking if any are available
          echo "has-required-secrets=$has_required" >> $GITHUB_OUTPUT
          echo "has-optional-apis=true" >> $GITHUB_OUTPUT

      - name: Verify Repository Structure
        run: |
          echo "Checking repository structure..."
          if [ ! -d "backend" ]; then
            echo "‚ùå ERROR: Backend directory not found"
            exit 1
          fi
          if [ ! -d "frontend" ]; then
            echo "‚ùå ERROR: Frontend directory not found"
            exit 1
          fi
          if [ ! -d "infrastructure" ]; then
            echo "‚ö†Ô∏è WARNING: Infrastructure directory not found"
          fi
          echo "‚úÖ Repository structure verified"

  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: prerequisites
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1" # Fail on critical and high vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Always upload, even if scan found issues
        with:
          sarif_file: "trivy-results.sarif"

  # Backend Jobs
  backend-lint-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest
    needs: prerequisites
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' }}

    strategy:
      matrix:
        task: ["lint", "test"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety

      - name: Run linting tasks
        if: matrix.task == 'lint'
        run: |
          cd backend
          echo "üîç Running code formatting checks..."
          black --check --diff .
          echo "‚úì Black formatting check complete"

          echo "üîç Running import sorting checks..."
          isort --check-only --diff .
          echo "‚úì isort check complete"

          echo "üîç Running flake8 linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          echo "‚úì flake8 check complete"

      - name: Run security checks
        if: matrix.task == 'lint'
        run: |
          cd backend
          echo "üîí Running bandit security scan..."
          bandit -r . -f json -o bandit_report.json || true
          bandit -r . --severity-level medium
          echo "‚úì bandit security scan complete"

          echo "üîí Running safety dependency check..."
          safety check --json --output safety_report.json || true
          safety check
          echo "‚úì safety check complete"

      - name: Run tests
        if: matrix.task == 'test'
        run: |
          cd backend
          echo "üß™ Running pytest with coverage..."
          pip install pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=html --disable-warnings

          # Enforce minimum test coverage requirements
          echo "üîç Checking test coverage thresholds..."
          coverage_percentage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          echo "Overall coverage: $coverage_percentage%"

          # Enforce a minimum coverage threshold of 70%
          if (( $(echo "$coverage_percentage < 70" | bc -l) )); then
            echo "‚ùå Test coverage below threshold: $coverage_percentage% < 70%"
            echo "Please add more tests to improve coverage"
            # We'll warn but not fail for now
          else
            echo "‚úÖ Test coverage meets threshold: $coverage_percentage% >= 70%"
          fi

      - name: Upload coverage reports
        if: matrix.task == 'test'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Jobs
  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    needs: prerequisites
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint code
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Run tests
        run: |
          cd frontend
          npm test

  # Build and prepare artifacts
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [backend-lint-test]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare backend for deployment
        run: |
          echo "üîß Preparing backend for deployment..."
          cd backend

          # Create a deployment package
          zip -r ../backend-deployment.zip . -x "*.pyc" "__pycache__/*" "*.git*" "tests/*" "venv/*"
          echo "‚úÖ Backend deployment package created"

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-package
          path: backend-deployment.zip
          retention-days: 1

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-lint-test]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 1

  # Validate infrastructure before deployment
  validate-infra:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: [prerequisites]
    if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.prerequisites.outputs.has-required-secrets == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check existing resources
        run: |
          echo "üîç Checking if resource group exists..."

          if az group show --name ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "‚úÖ Resource group ${{ env.RESOURCE_GROUP }} exists"
          else
            echo "‚ùå Resource group ${{ env.RESOURCE_GROUP }} does not exist"
            echo "Creating resource group..."
            az group create --name ${{ env.RESOURCE_GROUP }} --location eastus
          fi

  # Deployment jobs
  deploy-backend:
    name: Deploy Backend to App Service
    runs-on: ubuntu-latest
    needs: [build-backend, validate-infra]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-package
          path: .

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: "vigor-backend"
          package: "./backend-deployment.zip"

      - name: Run database migrations
        run: |
          echo "üîÑ Running database migrations..."
          cd backend
          python -c "from database.init_db import init_database; init_database()"

  deploy-functions:
    name: Deploy AI Functions
    runs-on: ubuntu-latest
    needs: [build-backend, validate-infra]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "./functions/requirements.txt"

      - name: Prepare Functions Package
        run: |
          echo "üîß Preparing AI Functions code..."
          mkdir -p functions
          cp -r backend/core/ai.py functions/
          cp -r backend/core/llm_providers.py functions/

          # Create requirements.txt for Functions
          cat > functions/requirements.txt << EOL
          azure-functions
          openai>=1.3.0
          google-generativeai>=0.3.0
          anthropic>=0.7.0
          langchain>=0.1.0
          langchain-community>=0.0.10
          pydantic>=2.4.0
          python-dotenv>=1.0.0
          EOL

          # Create host.json
          cat > functions/host.json << EOL
          {
            "version": "2.0",
            "logging": {
              "applicationInsights": {
                "samplingSettings": {
                  "isEnabled": true,
                  "excludedTypes": "Request"
                }
              }
            },
            "extensionBundle": {
              "id": "Microsoft.Azure.Functions.ExtensionBundle",
              "version": "[3.*, 4.0.0)"
            }
          }
          EOL

          echo "‚úÖ Functions package prepared"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          package: ./functions
          respect-funcignore: true

  deploy-frontend:
    name: Deploy Frontend App
    runs-on: ubuntu-latest
    needs: [build-frontend, validate-infra]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Using GitHub token for authentication
          azure_static_web_apps_api_token: ${{ secrets.GITHUB_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend/dist"
          api_location: ""
          output_location: ""
