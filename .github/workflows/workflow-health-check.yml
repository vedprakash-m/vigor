---
name: Workflow Health Check

on:
  schedule:
    - cron: "0 0 * * *" # Daily at midnight
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read

jobs:
  check-workflow-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install yamllint
        run: |
          python -m pip install --upgrade pip
          pip install yamllint

      - name: Validate workflow files
        id: yaml-validation
        run: |
          echo "::group::Validating workflow YAML files"

          # Create temp file for results
          mkdir -p /tmp/workflow-validation
          touch /tmp/workflow-validation/results.txt

          # Check all workflow files
          for file in .github/workflows/*.yml; do
            echo "Checking $file..."
            if yamllint -d relaxed $file > /tmp/workflow-validation/lint_output.txt 2>&1; then
              echo "‚úÖ $file - Valid" | tee -a /tmp/workflow-validation/results.txt
            else
              echo "‚ùå $file - Invalid" | tee -a /tmp/workflow-validation/results.txt
              echo "Errors:" | tee -a /tmp/workflow-validation/results.txt
              cat /tmp/workflow-validation/lint_output.txt | tee -a /tmp/workflow-validation/results.txt
              echo "file_with_errors=$(basename $file)" >> $GITHUB_OUTPUT
              echo "has_errors=true" >> $GITHUB_OUTPUT
            fi
            echo "" | tee -a /tmp/workflow-validation/results.txt
          done

          echo "::endgroup::"

          if [ "${has_errors:-false}" == "true" ]; then
            echo "::error::Workflow validation failed."
          else
            echo "::notice::All workflows are valid."
            echo "has_errors=false" >> $GITHUB_OUTPUT
          fi

      - name: Check workflow execution history
        id: execution-history
        run: |
          echo "::group::Checking workflow execution history"

          # Get all workflows
          WORKFLOWS=$(gh api /repos/${{ github.repository }}/actions/workflows | jq -r '.workflows[] | .id')

          for workflow_id in $WORKFLOWS; do
            # Get workflow details
            WORKFLOW_INFO=$(gh api /repos/${{ github.repository }}/actions/workflows/$workflow_id)
            WORKFLOW_NAME=$(echo $WORKFLOW_INFO | jq -r '.name')

            # Get recent runs
            RECENT_RUNS=$(gh api /repos/${{ github.repository }}/actions/workflows/$workflow_id/runs?per_page=10)
            SUCCESS_COUNT=$(echo $RECENT_RUNS | jq -r '.workflow_runs | map(select(.conclusion == "success")) | length')
            FAILURE_COUNT=$(echo $RECENT_RUNS | jq -r '.workflow_runs | map(select(.conclusion == "failure")) | length')
            TOTAL_RUNS=$(echo $RECENT_RUNS | jq -r '.workflow_runs | length')

            # Skip workflows with no recent runs
            if [ "$TOTAL_RUNS" -eq 0 ]; then
              echo "‚ö†Ô∏è $WORKFLOW_NAME - No recent runs" | tee -a /tmp/workflow-validation/results.txt
              continue
            fi

            # Calculate success rate
            SUCCESS_RATE=$(( SUCCESS_COUNT * 100 / TOTAL_RUNS ))

            # Report status
            if [ "$SUCCESS_RATE" -lt 50 ]; then
              echo "‚ùå $WORKFLOW_NAME - Success rate: $SUCCESS_RATE% ($SUCCESS_COUNT/$TOTAL_RUNS)" | tee -a /tmp/workflow-validation/results.txt
              echo "workflow_with_low_success=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
              echo "has_low_success=true" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ $WORKFLOW_NAME - Success rate: $SUCCESS_RATE% ($SUCCESS_COUNT/$TOTAL_RUNS)" | tee -a /tmp/workflow-validation/results.txt
            fi
          done

          echo "::endgroup::"

          if [ "${has_low_success:-false}" == "true" ]; then
            echo "::warning::Some workflows have low success rates."
          else
            echo "::notice::All workflows have healthy success rates."
            echo "has_low_success=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for broken references
        id: check-references
        run: |
          echo "::group::Checking for broken references in workflows"

          # Search for common issues
          BROKEN_REFS=0

          # Look for non-existent secrets
          SECRET_REFS=$(find .github/workflows -type f -name "*.yml" -exec grep -l "secrets\.[A-Za-z0-9_\-]*" {} \;)
          for file in $SECRET_REFS; do
            ALL_SECRETS=$(grep "secrets\.[A-Za-z0-9_\-]*" $file | sed -E 's/.*secrets\.([A-Za-z0-9_\-]*).*/\1/g' | sort | uniq)

            # Check standard secrets
            for secret in $ALL_SECRETS; do
              if [[ ! "$secret" =~ ^(GITHUB_TOKEN|github_token)$ ]]; then
                echo "‚ö†Ô∏è $file references non-standard secret: $secret" | tee -a /tmp/workflow-validation/results.txt
                BROKEN_REFS=$((BROKEN_REFS + 1))
              fi
            done
          done

          # Look for references to actions that might not exist
          for file in .github/workflows/*.yml; do
            # Extract all action references
            ACTIONS=$(grep -o "uses: [a-zA-Z0-9_\-\/]*@[a-zA-Z0-9\.]*" $file | sed 's/uses: //g' || echo "")

            for action in $ACTIONS; do
              # Extract action name and version
              ACTION_NAME=$(echo $action | cut -d '@' -f 1)
              ACTION_VERSION=$(echo $action | cut -d '@' -f 2)

              # Flag very old versions of common actions
              if [[ "$ACTION_NAME" == "actions/checkout" && "$ACTION_VERSION" < "v2" ]]; then
                echo "‚ö†Ô∏è $file uses outdated version of actions/checkout: $action" | tee -a /tmp/workflow-validation/results.txt
                BROKEN_REFS=$((BROKEN_REFS + 1))
              elif [[ "$ACTION_NAME" == "actions/setup-node" && "$ACTION_VERSION" < "v2" ]]; then
                echo "‚ö†Ô∏è $file uses outdated version of actions/setup-node: $action" | tee -a /tmp/workflow-validation/results.txt
                BROKEN_REFS=$((BROKEN_REFS + 1))
              fi
            done
          done

          echo "::endgroup::"

          if [ $BROKEN_REFS -gt 0 ]; then
            echo "::warning::Found $BROKEN_REFS potential issues in workflow references"
            echo "has_broken_refs=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::No broken references found in workflows"
            echo "has_broken_refs=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate health report
        run: |
          cat > workflow-health-report.md << EOL
          # üìä Workflow Health Report

          **Generated:** $(date)

          ## Summary

          - **YAML Validity:** ${{ steps.yaml-validation.outputs.has_errors == 'true' && '‚ùå Issues found' || '‚úÖ All valid' }}
          - **Execution Success Rates:** ${{ steps.execution-history.outputs.has_low_success == 'true' && '‚ö†Ô∏è Some workflows need attention' || '‚úÖ Healthy' }}
          - **Reference Check:** ${{ steps.check-references.outputs.has_broken_refs == 'true' && '‚ö†Ô∏è Potential issues found' || '‚úÖ No issues' }}

          ## Detailed Results

          \`\`\`
          $(cat /tmp/workflow-validation/results.txt)
          \`\`\`

          ## Recommendations

          ${{ steps.yaml-validation.outputs.has_errors == 'true' && '- Fix YAML issues in ' }}${{ steps.yaml-validation.outputs.file_with_errors }}
          ${{ steps.execution-history.outputs.has_low_success == 'true' && '- Investigate failures in workflow: ' }}${{ steps.execution-history.outputs.workflow_with_low_success }}
          ${{ steps.check-references.outputs.has_broken_refs == 'true' && '- Review workflows for broken references to actions or secrets' }}
          ${{ steps.yaml-validation.outputs.has_errors != 'true' && steps.execution-history.outputs.has_low_success != 'true' && steps.check-references.outputs.has_broken_refs != 'true' && '- All workflows appear healthy! üéâ' }}
          EOL

      - name: Create or update report issue
        if: ${{ steps.yaml-validation.outputs.has_errors == 'true' || steps.execution-history.outputs.has_low_success == 'true' || steps.check-references.outputs.has_broken_refs == 'true' }}
        run: |
          # Check if issue already exists
          ISSUE_NUMBER=$(gh issue list --search "Workflow Health Report" --json number -q '.[0].number' || echo "")

          if [ -n "$ISSUE_NUMBER" ]; then
            # Update existing issue
            gh issue edit $ISSUE_NUMBER --body-file workflow-health-report.md
            echo "Updated issue #$ISSUE_NUMBER with new health report"
          else
            # Create new issue
            gh issue create --title "üìä Workflow Health Report" --body-file workflow-health-report.md --label "ci,documentation"
            echo "Created new workflow health report issue"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack notification for issues
        if: ${{ steps.yaml-validation.outputs.has_errors == 'true' || steps.execution-history.outputs.has_low_success == 'true' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚ö†Ô∏è Workflow Health Check found issues!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚ö†Ô∏è Workflow Health Issues Detected"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.yaml-validation.outputs.has_errors == 'true' && '‚Ä¢ Invalid YAML in workflow files\n' || '' }}${{ steps.execution-history.outputs.has_low_success == 'true' && '‚Ä¢ Workflows with low success rates\n' || '' }}${{ steps.check-references.outputs.has_broken_refs == 'true' && '‚Ä¢ Potential broken references in workflows\n' || '' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check the GitHub issue for details."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || secrets.GITHUB_TOKEN }}
