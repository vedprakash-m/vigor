---
name: Secret Scanning

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sundays at midnight
  workflow_dispatch:

permissions:
  pull-requests: read
  contents: read

jobs:
  detect-secrets:
    name: Detect Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TruffleHog scan - comprehensive secret scanner
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # Gitleaks scan - focused on finding hardcoded secrets
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .github/gitleaks.toml
        continue-on-error: true

      # Use GitHub's built-in secret scanning API to check for exposed secrets
      - name: Check GitHub Secret Scanning Alerts
        if: github.event_name != 'pull_request'
        run: |
          echo "Checking for any active secret scanning alerts..."
          ALERTS=$(gh api repos/${{ github.repository }}/secret-scanning/alerts --jq '.[] | select(.state=="open")')
          if [ ! -z "$ALERTS" ]; then
            echo "::warning::Active secret scanning alerts found in repository!"
            echo "$ALERTS" | jq -r '.[] | "Secret type: \(.secret_type), Created at: \(.created_at)"'
            echo "Please review and resolve these alerts in the Security tab"
          else
            echo "No active secret scanning alerts found."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Run checks for specific dependency issues that might contain hardcoded credentials
  check-vulnerable-dependencies:
    name: Check for Vulnerable Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Scan npm dependencies for security issues
      - name: Run npm audit
        if: hashFiles('**/package.json') != ''
        run: |
          cd frontend && npm audit --audit-level=high --json || echo "Vulnerabilities found but continuing workflow"

      # Scan Python dependencies
      - name: Run Python vulnerability scan
        if: hashFiles('**/requirements.txt') != ''
        run: |
          cd backend
          pip install safety
          safety check -r requirements.txt || echo "Vulnerabilities found but continuing workflow"

      # Generate security report
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security_scan_report.md
          echo "\nRun date: $(date)" >> security_scan_report.md

          echo "\n## Secret Scanning Results" >> security_scan_report.md
          echo "Secret scanning completed. Please check the workflow logs for details." >> security_scan_report.md

          echo "\n## Dependency Vulnerability Report" >> security_scan_report.md
          if [ -f "frontend/package.json" ]; then
            echo "\n### JavaScript Dependencies" >> security_scan_report.md
            cd frontend && npm audit --audit-level=high || true
            cd ..
          fi

          if [ -f "backend/requirements.txt" ]; then
            echo "\n### Python Dependencies" >> security_scan_report.md
            cd backend && safety check -r requirements.txt --json || true
            cd ..
          fi

      # Upload report as artifact
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-report
          path: security_scan_report.md
          retention-days: 30

  # Notification job when secrets are found
  notify-on-secrets:
    name: Notify on Secret Detection
    needs: [detect-secrets, check-vulnerable-dependencies]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send notification
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîê Security Alert: Potential secrets detected in codebase',
              body: `## Security Alert

              Potential secrets or credentials were detected in the codebase during the automated scan.

              ### Details

              * Workflow run: [View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              * Trigger: \`${context.eventName}\`
              * Ref: \`${context.ref}\`

              ### Next steps

              1. Review the workflow logs to identify the potential secrets
              2. Revoke any exposed credentials immediately
              3. Remove the secrets from the codebase and replace with proper secret management
              4. Update this issue with the remediation status

              **Note:** This is an automatically generated alert from the secret scanning workflow.`
            });

            console.log(`Security issue created: ${issue.data.html_url}`);
