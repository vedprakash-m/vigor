name: Vigor CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write # Required for OIDC authentication

env:
  REGISTRY: vigoracr.azurecr.io
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  RESOURCE_GROUP: "vigor-rg"

jobs:
  # Initial validation job that must pass for pipeline to continue
  prerequisites:
    name: Prerequisites & Validation
    runs-on: ubuntu-latest
    outputs:
      has-required-secrets: ${{ steps.export-secrets.outputs.has-required-secrets }}
      has-optional-apis: ${{ steps.export-secrets.outputs.has-optional-apis }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set required secret values
        id: export-secrets
        run: |
          # Export secrets to environment variables
          echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "POSTGRES_ADMIN_PASSWORD=${{ secrets.POSTGRES_ADMIN_PASSWORD }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}" >> $GITHUB_ENV

          # Check required Azure authentication secrets
          has_required=true

          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] || [ -z "${{ secrets.AZURE_TENANT_ID }}" ] || [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "❌ ERROR: Missing required Azure authentication secrets"
            has_required=false
          fi

          # Check required application secrets
          if [ -z "${{ secrets.POSTGRES_ADMIN_PASSWORD }}" ] || [ -z "${{ secrets.SECRET_KEY }}" ] || [ -z "${{ secrets.ADMIN_EMAIL }}" ]; then
            echo "❌ ERROR: Missing required application secrets"
            has_required=false
          fi

          # Check optional API keys
          has_apis=false
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ] || [ -n "${{ secrets.GEMINI_API_KEY }}" ] || [ -n "${{ secrets.PERPLEXITY_API_KEY }}" ]; then
            has_apis=true
          fi

          echo "has-required-secrets=$has_required" >> $GITHUB_OUTPUT
          echo "has-optional-apis=$has_apis" >> $GITHUB_OUTPUT

      - name: Verify Repository Structure
        run: |
          echo "Checking repository structure..."
          if [ ! -d "backend" ]; then
            echo "❌ ERROR: Backend directory not found"
            exit 1
          fi
          if [ ! -d "frontend" ]; then
            echo "❌ ERROR: Frontend directory not found"
            exit 1
          fi
          if [ ! -d "infrastructure" ]; then
            echo "⚠️ WARNING: Infrastructure directory not found"
          fi
          echo "✅ Repository structure verified"

  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: prerequisites
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1" # Fail on critical and high vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Always upload, even if scan found issues
        with:
          sarif_file: "trivy-results.sarif"

  # Backend Jobs
  backend-lint-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest
    needs: prerequisites
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety

      - name: Format code with black
        run: |
          cd backend
          black --check --diff .

      - name: Sort imports with isort
        run: |
          cd backend
          isort --check-only --diff .

      - name: Lint with flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security check with bandit
        run: |
          cd backend
          bandit -r . -f json -o bandit_report.json || true
          bandit -r . --severity-level medium

      - name: Check dependencies for security vulnerabilities
        run: |
          cd backend
          safety check --json --output safety_report.json || true
          safety check

      - name: Run tests with coverage
        id: tests
        run: |
          cd backend
          pip install pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=html --disable-warnings

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: ${{ success() || failure() }} # Upload even if tests fail
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Jobs
  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    needs: prerequisites
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint code
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Run tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: ${{ success() || failure() }} # Upload even if tests fail
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build Jobs
  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [security-scan, backend-lint-test]
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch') }}

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          use: true

      - name: Log in to Azure Container Registry with OIDC
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_FEDERATED_TOKEN || '' }}

      - name: Log in to Azure Container Registry (fallback)
        if: ${{ failure() }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/vigor-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (local)
        id: build-local
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: vigor-backend:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image build and push
        if: ${{ !steps.build.outputs.digest }}
        run: |
          echo "❌ ERROR: Failed to build and push Docker image"
          exit 1

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-lint-test]
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch') }}

    outputs:
      artifact-name: "frontend-build"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # Infrastructure Validation
  infrastructure-validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: prerequisites
    if: ${{ needs.prerequisites.outputs.has-required-secrets == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: ./.github/actions/setup-azure-cli
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep Template
        id: validate
        timeout-minutes: 3 # Increased from 2 minutes
        run: |
          cd infrastructure/bicep
          az deployment group validate \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file main.bicep \
            --parameters parameters.bicepparam \
            --parameters postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                         secretKey="${{ secrets.SECRET_KEY }}" \
                         adminEmail="${{ secrets.ADMIN_EMAIL }}" \
                         openaiApiKey="${{ secrets.OPENAI_API_KEY || 'null' }}" \
                         geminiApiKey="${{ secrets.GEMINI_API_KEY || 'null' }}" \
                         perplexityApiKey="${{ secrets.PERPLEXITY_API_KEY || 'null' }}"

      - name: Build Bicep Template
        id: build
        timeout-minutes: 2
        run: |
          cd infrastructure/bicep
          az bicep build --file main.bicep

      - name: ARM Deployment What-If Analysis
        id: whatif
        run: |
          cd infrastructure/bicep
          az deployment group what-if \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file main.bicep \
            --parameters parameters.bicepparam \
            --parameters postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                         secretKey="${{ secrets.SECRET_KEY }}" \
                         adminEmail="${{ secrets.ADMIN_EMAIL }}" \
                         openaiApiKey="${{ secrets.OPENAI_API_KEY || 'null' }}" \
                         geminiApiKey="${{ secrets.GEMINI_API_KEY || 'null' }}" \
                         perplexityApiKey="${{ secrets.PERPLEXITY_API_KEY || 'null' }}"

  # Production Environment Deployment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, infrastructure-validate]
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: ./.github/actions/setup-azure-cli
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy Infrastructure with Bicep
        id: deploy-infrastructure
        run: |
          cd infrastructure/bicep
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          DEPLOYMENT_NAME="vigor-deployment-${TIMESTAMP}"

          az deployment group create \
            --name ${DEPLOYMENT_NAME} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file main.bicep \
            --parameters parameters.bicepparam \
            --parameters postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                         secretKey="${{ secrets.SECRET_KEY }}" \
                         adminEmail="${{ secrets.ADMIN_EMAIL }}" \
                         openaiApiKey="${{ secrets.OPENAI_API_KEY || 'null' }}" \
                         geminiApiKey="${{ secrets.GEMINI_API_KEY || 'null' }}" \
                         perplexityApiKey="${{ secrets.PERPLEXITY_API_KEY || 'null' }}"

          echo "deployment-name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT

      # Wait for infrastructure to finish provisioning
      - name: Wait for resources to provision
        run: sleep 30

      - name: Validate Azure Resources
        id: validate-resources
        uses: ./.github/actions/validate-azure-resources
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}

      - name: Deploy Backend to App Service
        id: deploy-backend
        if: ${{ needs.backend-build.outputs.image-tag != '' && steps.validate-resources.outputs.app-service-exists == 'true' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.validate-resources.outputs.app-service-name }}
          images: ${{ needs.backend-build.outputs.image-tag }}

      - name: Deploy Frontend to Static Web App
        id: deploy-frontend
        if: ${{ steps.validate-resources.outputs.static-web-app-exists == 'true' }}
        run: |
          # Get Static Web App deployment token
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name ${{ steps.validate-resources.outputs.static-web-app-name }} --query "properties.apiKey" --output tsv)

          if [ -z "$DEPLOYMENT_TOKEN" ]; then
            echo "❌ ERROR: Failed to get SWA deployment token"
            exit 1
          fi

          # Deploy frontend using GitHub Actions
          cd frontend
          npx @azure/static-web-apps-cli deploy ./dist --deployment-token "$DEPLOYMENT_TOKEN" --env production

      - name: Verify App Service Deployment
        if: ${{ steps.validate-resources.outputs.app-service-exists == 'true' }}
        run: |
          echo "Verifying App Service deployment..."
          APP_URL="https://${{ steps.validate-resources.outputs.app-service-name }}.azurewebsites.net/health"

          # Retry health check up to 6 times (30 seconds)
          for i in {1..6}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL)
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "✅ App Service deployment verified: HTTP $HTTP_STATUS"
              break
            else
              echo "⏳ Waiting for App Service to respond: HTTP $HTTP_STATUS"
              if [ $i -eq 6 ]; then
                echo "⚠️ WARNING: App Service health check failed after multiple attempts"
              else
                sleep 5
              fi
            fi
          done

      - name: Database Migration Status
        if: ${{ steps.validate-resources.outputs.postgres-exists == 'true' }}
        run: |
          echo "✅ PostgreSQL server found: ${{ steps.validate-resources.outputs.postgres-name }}"
          echo "📝 Database migrations will be handled during application startup"

      - name: Deployment Summary
        run: |
          echo "## 🚀 Vigor Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️  Infrastructure: ${{ steps.deploy-infrastructure.outputs.deployment-name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.validate-resources.outputs.app-service-exists }}" == "true" ]; then
            echo "- 🖥️  Backend: ✅ Deployed to ${{ steps.validate-resources.outputs.app-service-name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🖥️  Backend: ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.validate-resources.outputs.static-web-app-exists }}" == "true" ]; then
            echo "- 🌐 Frontend: ✅ Deployed to ${{ steps.validate-resources.outputs.static-web-app-name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🌐 Frontend: ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- 📊 Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # Health Check & Summary Job
  health-check:
    name: Pipeline Health Check
    runs-on: ubuntu-latest
    needs: [prerequisites, security-scan, backend-lint-test, frontend-lint-test]
    if: ${{ always() }}

    steps:
      - name: Check Job Status
        run: |
          if [[ "${{ needs.prerequisites.result }}" != "success" ]]; then
            echo "❌ Prerequisites check failed"
            echo "Prerequisites=❌" >> $GITHUB_ENV
          else
            echo "✅ Prerequisites check passed"
            echo "Prerequisites=✅" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.security-scan.result }}" != "success" && "${{ needs.security-scan.result }}" != "skipped" ]]; then
            echo "❌ Security scan failed"
            echo "Security=❌" >> $GITHUB_ENV
          else
            echo "✅ Security scan passed or was skipped"
            echo "Security=✅" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.backend-lint-test.result }}" != "success" && "${{ needs.backend-lint-test.result }}" != "skipped" ]]; then
            echo "❌ Backend tests failed"
            echo "Backend=❌" >> $GITHUB_ENV
          else
            echo "✅ Backend tests passed or were skipped"
            echo "Backend=✅" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.frontend-lint-test.result }}" != "success" && "${{ needs.frontend-lint-test.result }}" != "skipped" ]]; then
            echo "❌ Frontend tests failed"
            echo "Frontend=❌" >> $GITHUB_ENV
          else
            echo "✅ Frontend tests passed or were skipped"
            echo "Frontend=✅" >> $GITHUB_ENV
          fi

      - name: Generate Pipeline Summary
        run: |
          echo "## 🚀 Vigor CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.Prerequisites }} Prerequisites check" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.Security }} Security scan" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.Backend }} Backend tests" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.Frontend }} Frontend tests" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.prerequisites.result }}" == "success" &&
                "${{ needs.security-scan.result }}" != "failure" &&
                "${{ needs.backend-lint-test.result }}" != "failure" &&
                "${{ needs.frontend-lint-test.result }}" != "failure" ]]; then
            echo "### ✅ CI pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ CI pipeline encountered issues." >> $GITHUB_STEP_SUMMARY
          fi
