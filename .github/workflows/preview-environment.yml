name: PR Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "frontend/**"
      - "backend/**"
      - ".github/workflows/preview-environment.yml"

jobs:
  build-preview:
    name: Build Preview Environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate unique environment name
        id: env-name
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          ENVIRONMENT_NAME="pr-${PR_NUMBER}-${SHA_SHORT}"
          echo "environment_name=$ENVIRONMENT_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: `PR Preview: #${{ github.event.pull_request.number }}`,
              description: 'PR Preview Environment',
              auto_merge: false,
              required_contexts: []
            });

            console.log(`Created deployment: ${deployment.id}`);
            return deployment.id;

      # Setup Node and build frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # Setup Python and build backend
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: backend/requirements.txt

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Deploy to chosen preview platform (example using Azure Static Web Apps)
      - name: Deploy to Preview Environment
        id: deploy
        run: |
          # This is a placeholder for your actual deployment logic
          # This could be deploying to Netlify, Vercel, Azure Static Web Apps, or a custom solution

          # For Azure Static Web Apps example:
          # az staticwebapp create --name "vigor-preview-${{ steps.env-name.outputs.environment_name }}" --resource-group "vigor-preview" --location "westus2" --branch "${{ github.head_ref }}" --app-location "frontend" --api-location "backend" --output-location "dist"

          # For Netlify example:
          # netlify deploy --dir=frontend/dist --message "PR #${{ github.event.pull_request.number }} preview" --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.NETLIFY_SITE_ID }}

          # Set a mock preview URL for demonstration
          PREVIEW_URL="https://preview-${{ steps.env-name.outputs.environment_name }}.vigor-app.example.com"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

          # In a real implementation, capture the actual URL from your deployment platform

      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.preview_url }}',
              description: 'Preview environment is ready'
            });

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const previewUrl = '${{ steps.deploy.outputs.preview_url }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üöÄ Preview environment deployed successfully!\n\n[View Preview](${previewUrl})\n\nThis environment will be automatically cleaned up when this PR is closed.`
            });

  # E2E tests against the preview environment
  e2e-tests:
    name: Run E2E Tests on Preview
    needs: build-preview
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install test dependencies
        run: |
          cd frontend
          npm ci

      - name: Run E2E tests against preview
        run: |
          cd frontend
          # Set the preview URL as an environment variable for tests
          PREVIEW_URL=${{ needs.build-preview.outputs.preview_url }} npm run test:e2e

      - name: Report E2E test results
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testStatus = '${{ job.status }}';
            const statusIcon = testStatus === 'success' ? '‚úÖ' : '‚ùå';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${statusIcon} E2E Tests on preview environment: **${testStatus}**\n\nSee [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });

  # Cleanup job (triggered by PR close via separate workflow)
  # We'll implement the cleanup in a separate workflow that listens for PR close events
