name: Vigor CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - production

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  REGISTRY: vigoracr.azurecr.io
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Backend Jobs
  backend-lint-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety

      - name: Format code with black
        run: |
          cd backend
          black --check --diff .

      - name: Sort imports with isort
        run: |
          cd backend
          isort --check-only --diff .

      - name: Lint with flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security check with bandit
        run: |
          cd backend
          bandit -r . -f json -o bandit_report.json || true
          bandit -r . --severity-level medium

      - name: Check dependencies for security vulnerabilities
        run: |
          cd backend
          safety check --json --output safety_report.json || true
          safety check

      - name: Run tests with coverage
        run: |
          cd backend
          pip install pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=html --disable-warnings

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend Jobs
  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint code
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Run tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Jobs
  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [security-scan, backend-lint-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        continue-on-error: true
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/vigor-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (local)
        id: build-local
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: vigor-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Docker image
        id: build
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-lint-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # Infrastructure Validation
  infrastructure-validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Azure CLI Login
        uses: azure/login@v2
        continue-on-error: true
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Format Check
        id: fmt
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        continue-on-error: true
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: |
          cd infrastructure/terraform
          terraform validate

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          cd infrastructure/terraform
          terraform plan -var-file="environments/${{ github.ref_name == 'main' && 'production' || github.ref_name == 'staging' && 'staging' || 'dev' }}.tfvars" -no-color
        env:
          TF_VAR_postgres_admin_password: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_google_ai_api_key: ${{ secrets.GOOGLE_AI_API_KEY }}
          TF_VAR_perplexity_api_key: ${{ secrets.PERPLEXITY_API_KEY }}

  # Development Environment Deployment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, infrastructure-validate]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy Infrastructure
        continue-on-error: true
        run: |
          cd infrastructure/terraform
          terraform init
          terraform apply -var-file="environments/dev.tfvars" -auto-approve
        env:
          TF_VAR_postgres_admin_password: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_google_ai_api_key: ${{ secrets.GOOGLE_AI_API_KEY }}
          TF_VAR_perplexity_api_key: ${{ secrets.PERPLEXITY_API_KEY }}

      - name: Deploy Backend to App Service
        id: deploy-backend
        if: ${{ needs.backend-build.outputs.image-tag != '' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: vigor-dev-app
          images: ${{ needs.backend-build.outputs.image-tag }}

      - name: Deploy Frontend to Static Web App
        continue-on-error: true
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend/dist"
          skip_app_build: true

      - name: Run Database Migrations
        continue-on-error: true
        run: |
          az webapp config appsettings set --resource-group vigor-dev-rg --name vigor-dev-app --settings "DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}"
          az webapp ssh --resource-group vigor-dev-rg --name vigor-dev-app --command "cd /home/site/wwwroot && python -m alembic upgrade head"

  # Health Check Job - runs always to verify pipeline basics
  health-check:
    name: Pipeline Health Check
    runs-on: ubuntu-latest
    needs: [security-scan, backend-lint-test, frontend-lint-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Repository Structure
        run: |
          echo "Checking repository structure..."
          ls -la
          echo "Backend structure:"
          ls -la backend/
          echo "Frontend structure:"
          ls -la frontend/
          echo "Infrastructure structure:"
          ls -la infrastructure/ || echo "Infrastructure directory not found"

      - name: Generate Pipeline Summary
        run: |
          echo "## 🚀 Vigor CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ secrets.AZURE_CLIENT_ID }}" != "" ]]; then
            echo "- ✅ Azure credentials configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Azure credentials not configured (deployment skipped)" >> $GITHUB_STEP_SUMMARY
          fi

          # Note: Codecov integration status would be shown here if configured
          echo "- 📊 Coverage reporting: Available" >> $GITHUB_STEP_SUMMARY
