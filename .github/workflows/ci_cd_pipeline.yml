name: Vigor CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  REGISTRY: vigoracr.azurecr.io
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "22"

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Backend Jobs
  backend-lint-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety

      - name: Format code with black
        run: |
          cd backend
          black --check --diff .

      - name: Sort imports with isort
        run: |
          cd backend
          isort --check-only --diff .

      - name: Lint with flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security check with bandit
        run: |
          cd backend
          bandit -r . -f json -o bandit_report.json || true
          bandit -r . --severity-level medium

      - name: Check dependencies for security vulnerabilities
        run: |
          cd backend
          safety check --json --output safety_report.json || true
          safety check

      - name: Run tests with coverage
        run: |
          cd backend
          pip install pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=html --disable-warnings

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend Jobs
  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint code
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Run tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Jobs
  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [security-scan, backend-lint-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        continue-on-error: true
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/vigor-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (local)
        id: build-local
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: vigor-backend:latest
          platforms: linux/amd64

      - name: Build and push Docker image
        id: build
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-lint-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # Infrastructure Validation
  infrastructure-validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        continue-on-error: true
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Bicep CLI
        run: |
          az bicep install

      - name: Validate Bicep Template
        id: validate
        timeout-minutes: 2
        continue-on-error: true
        run: |
          cd infrastructure/bicep
          az deployment group validate \
            --resource-group vigor-prod-rg \
            --template-file main.bicep \
            --parameters parameters.bicepparam \
            --parameters postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                         secretKey="${{ secrets.SECRET_KEY }}" \
                         adminEmail="${{ secrets.ADMIN_EMAIL }}" \
                         openaiApiKey="${{ secrets.OPENAI_API_KEY }}" \
                         geminiApiKey="${{ secrets.GEMINI_API_KEY }}" \
                         perplexityApiKey="${{ secrets.PERPLEXITY_API_KEY }}"

      - name: Build Bicep Template
        id: build
        timeout-minutes: 1
        continue-on-error: true
        run: |
          cd infrastructure/bicep
          az bicep build --file main.bicep

  # Production Environment Deployment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, infrastructure-validate]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Validate Required Secrets
        run: |
          echo "🔑 Validating required secrets..."
          missing_secrets=()

          # Check required secrets
          if [ -z "${{ secrets.POSTGRES_ADMIN_PASSWORD }}" ]; then
            missing_secrets+=("POSTGRES_ADMIN_PASSWORD")
          fi

          if [ -z "${{ secrets.SECRET_KEY }}" ]; then
            missing_secrets+=("SECRET_KEY")
          fi

          if [ -z "${{ secrets.ADMIN_EMAIL }}" ]; then
            missing_secrets+=("ADMIN_EMAIL")
          fi

          # Optional API keys (warn but don't fail)
          optional_secrets=()
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            optional_secrets+=("OPENAI_API_KEY")
          fi

          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            optional_secrets+=("GEMINI_API_KEY")
          fi

          if [ -z "${{ secrets.PERPLEXITY_API_KEY }}" ]; then
            optional_secrets+=("PERPLEXITY_API_KEY")
          fi

          # Report missing required secrets
          if [ ${#missing_secrets[@]} -gt 0 ]; then
            echo "❌ Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

          # Report missing optional secrets
          if [ ${#optional_secrets[@]} -gt 0 ]; then
            echo "⚠️  Missing optional secrets: ${optional_secrets[*]}"
            echo "   These are not required for deployment but may affect functionality"
          fi

          echo "✅ All required secrets are available"

      - name: Deploy Infrastructure (Quota-Resilient)
        id: deploy-infrastructure
        run: |
          echo "🚀 Starting quota-resilient Azure deployment..."
          cd infrastructure/bicep

          # Export environment variables for the deployment script
          export POSTGRES_ADMIN_PASSWORD="${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
          export PERPLEXITY_API_KEY="${{ secrets.PERPLEXITY_API_KEY }}"
          export ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"

          # Make script executable and run quota-resilient deployment
          chmod +x deploy-quota-resilient.sh
          ./deploy-quota-resilient.sh

      - name: Verify Infrastructure Deployment
        run: |
          echo "🔍 Verifying infrastructure deployment..."
          echo "📋 Resources in vigor-prod-rg:"
          az resource list --resource-group vigor-prod-rg --output table

          echo ""
          echo "🌐 Static Web Apps:"
          az staticwebapp list --resource-group vigor-prod-rg --output table || echo "No Static Web Apps found"

          echo ""
          echo "🖥️  App Services:"
          az webapp list --resource-group vigor-prod-rg --output table || echo "No App Services found"

      - name: Get App Service Name
        id: get-app-name
        run: |
          # Wait for App Service to be fully deployed
          echo "Getting App Service information..."

          APP_NAME=$(az webapp list --resource-group vigor-prod-rg --query "[?contains(name, 'backend') || contains(name, 'app')].name" --output tsv)

          if [ -z "$APP_NAME" ]; then
            echo "No App Service found with 'backend' or 'app' in name. Checking all App Services..."
            APP_NAME=$(az webapp list --resource-group vigor-prod-rg --query "[0].name" --output tsv)
          fi

          if [ -z "$APP_NAME" ]; then
            echo "No App Services found in resource group."
            echo "app-exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found App Service: $APP_NAME"
          echo "app-name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "app-exists=true" >> $GITHUB_OUTPUT

      - name: Deploy Backend to App Service
        id: deploy-backend
        if: ${{ needs.backend-build.outputs.image-tag != '' && steps.get-app-name.outputs.app-exists == 'true' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.get-app-name.outputs.app-name }}
          images: ${{ needs.backend-build.outputs.image-tag }}

      - name: App Service Deployment Status
        run: |
          if [ "${{ steps.get-app-name.outputs.app-exists }}" == "true" ]; then
            echo "✅ App Service deployment completed"
            echo "🖥️  App Service: ${{ steps.get-app-name.outputs.app-name }}"
          else
            echo "⚠️  App Service not found - infrastructure deployment may have failed"
          fi

      - name: Get Static Web App Info
        id: get-swa-info
        run: |
          # Wait for Static Web App to be fully deployed
          echo "Waiting for Static Web App deployment to complete..."
          sleep 30

          # Get Static Web App name with error handling
          SWA_NAME=$(az staticwebapp list --resource-group vigor-prod-rg --query "[?contains(name, 'frontend')].name" --output tsv)

          if [ -z "$SWA_NAME" ]; then
            echo "Static Web App not found. Checking all static sites..."
            SWA_NAME=$(az staticwebapp list --resource-group vigor-prod-rg --query "[0].name" --output tsv)
          fi

          if [ -z "$SWA_NAME" ]; then
            echo "No Static Web Apps found in resource group. Deployment may have failed."
            echo "swa-exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found Static Web App: $SWA_NAME"
          echo "swa-name=$SWA_NAME" >> $GITHUB_OUTPUT
          echo "swa-exists=true" >> $GITHUB_OUTPUT

      - name: Get Static Web App Token
        id: get-swa-token
        if: steps.get-swa-info.outputs.swa-exists == 'true'
        run: |
          SWA_TOKEN=$(az staticwebapp secrets list \
            --resource-group vigor-prod-rg \
            --name ${{ steps.get-swa-info.outputs.swa-name }} \
            --query "properties.apiKey" \
            --output tsv)
          echo "::add-mask::$SWA_TOKEN"
          echo "token=$SWA_TOKEN" >> $GITHUB_OUTPUT

      - name: Deploy Frontend to Static Web App
        if: steps.get-swa-info.outputs.swa-exists == 'true'
        continue-on-error: true
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get-swa-token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend/dist"
          skip_app_build: true

      - name: Static Web App Deployment Status
        run: |
          if [ "${{ steps.get-swa-info.outputs.swa-exists }}" == "true" ]; then
            echo "✅ Static Web App deployment initiated successfully"
            echo "🌐 Static Web App: ${{ steps.get-swa-info.outputs.swa-name }}"
          else
            echo "⚠️  Static Web App not found - infrastructure deployment may have failed"
            echo "📋 Available resources in vigor-prod-rg:"
            az resource list --resource-group vigor-prod-rg --output table || true
          fi

      - name: Run Database Migrations
        continue-on-error: true
        run: |
          echo "🗄️  Database migration status..."

          # Get PostgreSQL server name
          PG_SERVER=$(az postgres flexible-server list --resource-group vigor-prod-rg --query "[0].fullyQualifiedDomainName" --output tsv)

          if [ -z "$PG_SERVER" ]; then
            echo "⚠️  PostgreSQL server not found - skipping migrations"
            exit 0
          fi

          echo "✅ PostgreSQL server found: $PG_SERVER"
          echo "📝 Database migrations will be handled during application startup"
          echo "   Django migrations are configured to run automatically"

      - name: Deployment Summary
        run: |
          echo "## 🚀 Vigor Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️  Infrastructure: ${{ steps.deploy-infrastructure.outputs.deployment-name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.get-app-name.outputs.app-exists }}" == "true" ]; then
            echo "- 🖥️  Backend: ✅ Deployed to ${{ steps.get-app-name.outputs.app-name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🖥️  Backend: ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.get-swa-info.outputs.swa-exists }}" == "true" ]; then
            echo "- 🌐 Frontend: ✅ Deployed to ${{ steps.get-swa-info.outputs.swa-name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🌐 Frontend: ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- 📊 Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # Health Check Job - runs always to verify pipeline basics
  health-check:
    name: Pipeline Health Check
    runs-on: ubuntu-latest
    needs: [security-scan, backend-lint-test, frontend-lint-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Repository Structure
        run: |
          echo "Checking repository structure..."
          ls -la
          echo "Backend structure:"
          ls -la backend/
          echo "Frontend structure:"
          ls -la frontend/
          echo "Infrastructure structure:"
          ls -la infrastructure/ || echo "Infrastructure directory not found"

      - name: Generate Pipeline Summary
        run: |
          echo "## 🚀 Vigor CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ secrets.AZURE_CLIENT_ID }}" != "" ]]; then
            echo "- ✅ Azure OIDC authentication configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Azure credentials not configured (deployment skipped)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- 🏗️  Infrastructure: Azure Bicep templates" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Coverage reporting: Enabled via Codecov" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- 🚀 Production deployment: Enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🧪 Test environment: PR validation only" >> $GITHUB_STEP_SUMMARY
          fi
