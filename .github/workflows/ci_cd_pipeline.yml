name: Vigor CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  REGISTRY: vigorfitness.azurecr.io # Updated to a valid ACR name
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  RESOURCE_GROUP: "vigor-rg"
  # New architecture configuration
  USE_DIRECT_DEPLOYMENT: "true" # Set to true for App Service + Functions, false for container-based
  FUNCTION_APP_NAME: "vigor-ai-functions"
  STATIC_WEBAPP_NAME: "vigor-static-webapp"

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [prerequisites]
    if: ${{ needs.prerequisites.outputs.required-secrets-valid == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies for scanning
        run: |
          echo "üì¶ Installing dependencies for vulnerability scanning..."
          # Set up Python dependencies for better scanning
          if [ -d "backend" ] && [ -f "backend/requirements.txt" ]; then
            cd backend
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt --no-deps
            cd ..
          fi

          # Set up frontend dependencies if needed
          if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
            cd frontend
            npm ci --ignore-scripts || npm install --no-fund --no-audit --ignore-scripts
            cd ..
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true # Skip vulnerabilities with no available fix
          severity: "CRITICAL" # Focus only on critical vulnerabilities for now
          exit-code: "0" # Must be a string to ensure it's set correctly

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Backend Jobs
  backend-lint-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: ["lint", "test"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit safety

      - name: Run linting tasks
        if: matrix.task == 'lint'
        run: |
          cd backend
          echo "üîç Running code formatting checks..."
          black --check --diff .
          echo "‚úì Black formatting check complete"

          echo "üîç Running import sorting checks..."
          isort --check-only --diff .
          echo "‚úì isort check complete"

          echo "üîç Running flake8 linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          echo "‚úì flake8 check complete"

      - name: Run security checks
        if: matrix.task == 'lint'
        run: |
          cd backend
          echo "üîí Running bandit security scan..."
          bandit -r . -f json -o bandit_report.json || true
          bandit -r . --severity-level medium
          echo "‚úì bandit security scan complete"

          echo "üîí Running safety dependency check..."
          safety check --json --output safety_report.json || true
          safety check
          echo "‚úì safety check complete"

      - name: Run tests
        if: matrix.task == 'test'
        run: |
          cd backend
          echo "üß™ Running pytest with coverage..."
          pip install pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=html --disable-warnings

          # Enforce minimum test coverage requirements
          echo "üîç Checking test coverage thresholds..."
          coverage_percentage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          echo "Overall coverage: $coverage_percentage%"

          # Enforce a minimum coverage threshold of 70%
          if (( $(echo "$coverage_percentage < 70" | bc -l) )); then
            echo "‚ùå Test coverage below threshold: $coverage_percentage% < 70%"
            echo "Please add more tests to improve coverage"
            # Uncomment the line below to enforce the coverage threshold
            # exit 1
          else
            echo "‚úÖ Test coverage meets threshold: $coverage_percentage% >= 70%"
          fi

          echo "‚úì Tests complete"

      - name: Upload coverage reports
        if: matrix.task == 'test'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN || github.token }}

  # Frontend Jobs
  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint code
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Run tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Jobs
  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [security-scan, backend-lint-test]
    # Only run this job if we're NOT using direct deployment (i.e., still using containers)
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging') && vars.USE_DIRECT_DEPLOYMENT != 'true'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container # Required for cache export
          buildkitd-flags: --allow-insecure-entitlement security.insecure
          install: true
          use: true

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry via Azure CLI
        run: |
          echo "üîê Logging into Azure Container Registry..."
          az acr login --name $(echo "${{ env.REGISTRY }}" | cut -d '.' -f1) || echo "ACR login failed, will try fallback method"

      - name: Log in to Azure Container Registry (fallback)
        if: ${{ failure() }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/vigor-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (local)
        id: build-local
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          load: true # Load image into Docker so we can use it locally
          tags: vigor-backend:latest
          platforms: linux/amd64
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/vigor-backend:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/vigor-backend:buildcache,mode=max,ignore-error=true

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image build and push
        run: |
          echo "üîç Verifying image build..."
          if [ -z "${{ steps.build.outputs.digest }}" ]; then
            echo "‚ùå ERROR: Failed to build and push Docker image"
            # Don't fail the build yet - let's check if the image exists in ACR
            echo "üîç Checking if image exists in ACR..."
            IMAGE_EXISTS=$(az acr repository show --name $(echo "${{ env.REGISTRY }}" | cut -d '.' -f1) --image vigor-backend:latest 2>/dev/null || echo "false")
            if [ "$IMAGE_EXISTS" != "false" ]; then
              echo "‚úÖ Image already exists in ACR, proceeding"
            else
              echo "‚ùå Image does not exist in ACR"
              exit 1
            fi
          else
            echo "‚úÖ Image successfully built and pushed"
          fi

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-lint-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # Infrastructure Validation
  infrastructure-validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        continue-on-error: true
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup stable Azure CLI
        run: |
          echo "üîÑ Setting up a stable Azure CLI version..."

          # Get current version
          current_version=$(az version --query '"azure-cli"' -o tsv)
          echo "Current Azure CLI version: $current_version"

          # Use the installed version, but apply workarounds for common issues
          echo "Applying configuration workarounds for Azure CLI deployment issues..."
          az config set core.only_show_errors=true
          az config set core.output=json
          az config set bicep.use_binary_from_path=false

          # Check if ARM deployment works with current version
          echo "Testing ARM functionality..."
          az group exists --name vigor-rg

          az --version

      - name: Install Bicep CLI
        run: |
          az bicep install

      - name: Validate Bicep Template
        id: validate
        timeout-minutes: 2
        run: |
          cd infrastructure/bicep

          # Create a parameter file with defaults
          cat > temp_params.json << EOL
          {
            "parameters": {
              "environment": {
                "value": "prod"
              },
              "location": {
                "value": "East US"
              },
              "appName": {
                "value": "vigor"
              },
              "postgresAdminUsername": {
                "value": "admin"
              },
              "postgresAdminPassword": {
                "value": "${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
              },
              "secretKey": {
                "value": "${{ secrets.SECRET_KEY }}"
              },
              "adminEmail": {
                "value": "${{ secrets.ADMIN_EMAIL }}"
              },
              "openaiApiKey": {
                "value": "sk-placeholder"
              },
              "geminiApiKey": {
                "value": "ai-placeholder"
              },
              "perplexityApiKey": {
                "value": "pplx-placeholder"
              },
              "useDirectDeployment": {
                "value": true
              }
            }
          }
          EOL

          echo "Running Bicep template validation with parameters file..."
          az deployment group validate \
            --resource-group vigor-rg \
            --template-file main.bicep \
            --parameters @temp_params.json

      - name: Build Bicep Template
        id: build
        timeout-minutes: 1
        continue-on-error: true
        run: |
          cd infrastructure/bicep
          az bicep build --file main.bicep

  # Production Environment Deployment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, infrastructure-validate]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Record deployment start time
        id: deployment_start
        run: |
          echo "time=$(date +%s)" >> $GITHUB_OUTPUT
          echo "‚è±Ô∏è Deployment started at $(date -u)"

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Downgrade Azure CLI (workaround for 2.73+ bug)
        run: |
          echo "‚è¨ Installing Azure CLI 2.72.0 to avoid ARM deployment bug..."
          sudo apt-get remove --yes azure-cli || true
          sudo apt-get update -y
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update -y
          sudo apt-get install --yes azure-cli=2.72.0-1~$(lsb_release -cs)
          az --version

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Validate Required Secrets
        run: |
          echo "üîë Validating required secrets..."
          missing_secrets=()

          # Check required secrets
          if [ -z "${{ secrets.POSTGRES_ADMIN_PASSWORD }}" ]; then
            missing_secrets+=("POSTGRES_ADMIN_PASSWORD")
          fi

          if [ -z "${{ secrets.SECRET_KEY }}" ]; then
            missing_secrets+=("SECRET_KEY")
          fi

          if [ -z "${{ secrets.ADMIN_EMAIL }}" ]; then
            missing_secrets+=("ADMIN_EMAIL")
          fi

          # Optional API keys (warn but don't fail)
          optional_secrets=()
          # Check for optional LLM API keys - extract to variables first
          OPENAI_KEY="${{ secrets.OPENAI_API_KEY || '' }}"
          GEMINI_KEY="${{ secrets.GEMINI_API_KEY || '' }}"
          PERPLEXITY_KEY="${{ secrets.PERPLEXITY_API_KEY || '' }}"

          if [ -z "$OPENAI_KEY" ]; then
            optional_secrets+=("OPENAI_API_KEY")
          fi

          if [ -z "$GEMINI_KEY" ]; then
            optional_secrets+=("GEMINI_API_KEY")
          fi

          if [ -z "$PERPLEXITY_KEY" ]; then
            optional_secrets+=("PERPLEXITY_API_KEY")
          fi

          # Report missing required secrets
          if [ ${#missing_secrets[@]} -gt 0 ]; then
            echo "‚ùå Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

          # Report missing optional secrets
          if [ ${#optional_secrets[@]} -gt 0 ]; then
            echo "‚ö†Ô∏è  Missing optional secrets: ${optional_secrets[*]}"
            echo "   These are not required for deployment but may affect functionality"
          fi

          echo "‚úÖ All required secrets are available"

      - name: Deploy Infrastructure (Quota-Resilient)
        id: deploy-infrastructure
        run: |
          echo "üöÄ Starting quota-resilient Azure deployment..."
          cd infrastructure/bicep

          # Export environment variables for the deployment script
          export POSTGRES_ADMIN_PASSWORD="${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          export ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"

          # Default placeholder values for API keys
          export OPENAI_API_KEY="sk-placeholder"
          export GEMINI_API_KEY="ai-placeholder"
          export PERPLEXITY_API_KEY="pplx-placeholder"

          # Create parameter file for deployment
          cat > deployment-params.json << EOL
          {
            "parameters": {
              "environment": {
                "value": "prod"
              },
              "postgresAdminUsername": {
                "value": "admin"
              },
              "postgresAdminPassword": {
                "value": "${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
              },
              "secretKey": {
                "value": "${{ secrets.SECRET_KEY }}"
              },
              "adminEmail": {
                "value": "${{ secrets.ADMIN_EMAIL }}"
              }
            }
          }
          EOL

          # Make script executable and run quota-resilient deployment
          chmod +x deploy-quota-resilient.sh
          ./deploy-quota-resilient.sh

      - name: Verify Infrastructure Deployment
        run: |
          echo "üîç Verifying infrastructure deployment..."
          echo "üìã Resources in vigor-rg:"
          az resource list --resource-group vigor-rg --output table

          echo ""
          echo "üåê Static Web Apps:"
          az staticwebapp list --resource-group vigor-rg --output table || echo "No Static Web Apps found"

          echo ""
          echo "üñ•Ô∏è  App Services:"
          az webapp list --resource-group vigor-rg --output table || echo "No App Services found"

      - name: Get App Service Name
        id: get-app-name
        run: |
          # Wait for App Service to be fully deployed
          echo "Getting App Service information..."

          APP_NAME=$(az webapp list --resource-group vigor-rg --query "[?contains(name, 'backend') || contains(name, 'app')].name" --output tsv)

          if [ -z "$APP_NAME" ]; then
            echo "No App Service found with 'backend' or 'app' in name. Checking all App Services..."
            APP_NAME=$(az webapp list --resource-group vigor-rg --query "[0].name" --output tsv)
          fi

          if [ -z "$APP_NAME" ]; then
            echo "No App Services found in resource group."
            echo "app-exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found App Service: $APP_NAME"
          echo "app-name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "app-exists=true" >> $GITHUB_OUTPUT

      - name: Deploy Backend to App Service
        id: deploy-backend
        if: ${{ needs.backend-build.outputs.image-tag != '' && steps.get-app-name.outputs.app-exists == 'true' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.get-app-name.outputs.app-name }}
          images: ${{ needs.backend-build.outputs.image-tag }}

      - name: App Service Deployment Status
        run: |
          if [ "${{ steps.get-app-name.outputs.app-exists }}" == "true" ]; then
            echo "‚úÖ App Service deployment completed"
            echo "üñ•Ô∏è  App Service: ${{ steps.get-app-name.outputs.app-name }}"
          else
            echo "‚ö†Ô∏è  App Service not found - infrastructure deployment may have failed"
          fi

      - name: Get Static Web App Info
        id: get-swa-info
        run: |
          # Wait for Static Web App to be fully deployed
          echo "Waiting for Static Web App deployment to complete..."
          sleep 30

          # Get Static Web App name with error handling
          SWA_NAME=$(az staticwebapp list --resource-group vigor-rg --query "[?contains(name, 'frontend')].name" --output tsv)

          if [ -z "$SWA_NAME" ]; then
            echo "Static Web App not found. Checking all static sites..."
            SWA_NAME=$(az staticwebapp list --resource-group vigor-rg --query "[0].name" --output tsv)
          fi

          if [ -z "$SWA_NAME" ]; then
            echo "No Static Web Apps found in resource group. Deployment may have failed."
            echo "swa-exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found Static Web App: $SWA_NAME"
          echo "swa-name=$SWA_NAME" >> $GITHUB_OUTPUT
          echo "swa-exists=true" >> $GITHUB_OUTPUT

      - name: Get Static Web App Token
        id: get-swa-token
        if: steps.get-swa-info.outputs.swa-exists == 'true'
        run: |
          SWA_TOKEN=$(az staticwebapp secrets list \
            --resource-group vigor-rg \
            --name ${{ steps.get-swa-info.outputs.swa-name }} \
            --query "properties.apiKey" \
            --output tsv)
          echo "::add-mask::$SWA_TOKEN"
          echo "token=$SWA_TOKEN" >> $GITHUB_OUTPUT

      - name: Deploy Frontend to Static Web App
        if: steps.get-swa-info.outputs.swa-exists == 'true'
        continue-on-error: true
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get-swa-token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend/dist"
          skip_app_build: true

      - name: Static Web App Deployment Status
        run: |
          if [ "${{ steps.get-swa-info.outputs.swa-exists }}" == "true" ]; then
            echo "‚úÖ Static Web App deployment initiated successfully"
            echo "üåê Static Web App: ${{ steps.get-swa-info.outputs.swa-name }}"
          else
            echo "‚ö†Ô∏è  Static Web App not found - infrastructure deployment may have failed"
            echo "üìã Available resources in vigor-rg:"
            az resource list --resource-group vigor-rg --output table || true
          fi

      - name: Run Database Migrations
        continue-on-error: true
        run: |
          echo "üóÑÔ∏è  Database migration status..."

          # Get PostgreSQL server name
          PG_SERVER=$(az postgres flexible-server list --resource-group vigor-rg --query "[0].fullyQualifiedDomainName" --output tsv)

          if [ -z "$PG_SERVER" ]; then
            echo "‚ö†Ô∏è  PostgreSQL server not found - skipping migrations"
            exit 0
          fi

          echo "‚úÖ PostgreSQL server found: $PG_SERVER"
          echo "üìù Database migrations will be handled during application startup"
          echo "   Django migrations are configured to run automatically"

      - name: Deployment Summary
        run: |
          echo "## üöÄ Vigor Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è  Infrastructure: ${{ steps.deploy-infrastructure.outputs.deployment-name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.get-app-name.outputs.app-exists }}" == "true" ]; then
            echo "- üñ•Ô∏è  Backend: ‚úÖ Deployed to ${{ steps.get-app-name.outputs.app-name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üñ•Ô∏è  Backend: ‚ùå Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.get-swa-info.outputs.swa-exists }}" == "true" ]; then
            echo "- üåê Frontend: ‚úÖ Deployed to ${{ steps.get-swa-info.outputs.swa-name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üåê Frontend: ‚ùå Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- üìä Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- üîó Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Generate deployment summary
        if: success()
        run: |
          echo "üìä Generating deployment summary..."
          chmod +x ./scripts/generate-deployment-summary.sh

          # Calculate deployment duration
          DEPLOYMENT_DURATION="$(( $(date +%s) - ${{ steps.deployment_start.outputs.time }} )) seconds"

          # Export variables for the summary script
          export ENVIRONMENT="production"
          export DEPLOYMENT_DURATION="$DEPLOYMENT_DURATION"
          export AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          # Generate and upload summary
          ./scripts/generate-deployment-summary.sh

          # Add summary to GitHub step
          echo "::group::Deployment Summary"
          cat deployment-summary.md
          echo "::endgroup::"

          # Upload as artifact
          mkdir -p deployment-artifacts
          cp deployment-summary.md deployment-artifacts/

      - name: Upload deployment artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment-artifacts/
          if-no-files-found: ignore

      - name: Perform post-deployment health check
        run: |
          echo "üîç Validating deployment..."
          chmod +x ./scripts/health-check.sh

          # Get the deployed endpoint URL
          ENDPOINT_URL=$(az webapp show \
            --resource-group vigor-rg \
            --name vigor-app-service \
            --query defaultHostName \
            --output tsv)

          # Run health checks
          ENDPOINT_URL="https://$ENDPOINT_URL" ./scripts/health-check.sh

          echo "‚úÖ Deployment validated successfully"

  # Health Check Job - runs always to verify pipeline basics
  health-check:
    name: Pipeline Health Check
    runs-on: ubuntu-latest
    needs: [security-scan, backend-lint-test, frontend-lint-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Repository Structure
        run: |
          echo "Checking repository structure..."
          ls -la
          echo "Backend structure:"
          ls -la backend/
          echo "Frontend structure:"
          ls -la frontend/
          echo "Infrastructure structure:"
          ls -la infrastructure/ || echo "Infrastructure directory not found"

      - name: Generate Pipeline Summary
        run: |
          echo "## üöÄ Vigor CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Security scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Backend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîó Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ secrets.AZURE_CLIENT_ID }}" != "" ]]; then
            echo "- ‚úÖ Azure OIDC authentication configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è Azure credentials not configured (deployment skipped)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- üèóÔ∏è  Infrastructure: Azure Bicep templates" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Coverage reporting: Enabled via Codecov" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- üöÄ Production deployment: Enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üß™ Test environment: PR validation only" >> $GITHUB_STEP_SUMMARY
          fi

  # Prerequisite validation job
  prerequisites:
    name: Prerequisites & Validation
    runs-on: ubuntu-latest
    outputs:
      required-secrets-valid: ${{ steps.secrets.outputs.required-secrets-valid }}
      openai-api-key: ${{ steps.secrets.outputs.openai-api-key }}
      gemini-api-key: ${{ steps.secrets.outputs.gemini-api-key }}
      perplexity-api-key: ${{ steps.secrets.outputs.perplexity-api-key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate repository structure
        run: |
          echo "üîç Checking repository structure..."
          missing_dirs=()

          for dir in backend frontend infrastructure scripts; do
            if [ ! -d "$dir" ]; then
              missing_dirs+=("$dir")
            fi
          done

          if [ ${#missing_dirs[@]} -gt 0 ]; then
            echo "‚ùå Missing required directories: ${missing_dirs[*]}"
            exit 1
          fi

          echo "‚úÖ Repository structure is valid"

      - name: Manage secrets
        id: secrets
        uses: ./.github/actions/manage-secrets
        with:
          azure-authentication: "true"
          api-keys: "true"
          postgres-admin-password: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
          secret-key: ${{ secrets.SECRET_KEY }}
          admin-email: ${{ secrets.ADMIN_EMAIL }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # New architecture jobs for App Service + Functions deployment
  deploy-backend-app-service:
    name: Deploy Backend to App Service
    runs-on: ubuntu-latest
    needs: [backend-build, infrastructure-validate]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "./backend/requirements.txt"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing backend dependencies..."
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare deployment package
        run: |
          echo "üîß Preparing deployment package..."
          cd backend

          # Create a deployment script for Azure App Service
          cat > startup.sh << EOL
          #!/bin/bash
          cd /home/site/wwwroot

          # Ensure proper activation of the environment
          source /opt/python/latest/env/bin/activate

          # Start Gunicorn with proper worker configuration
          gunicorn main:app --workers=4 --worker-class=uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000
          EOL

          chmod +x startup.sh

          # Compress the application for deployment
          zip -r ../backend-deployment.zip . -x "*.pyc" "__pycache__/*" "*.git*" "tests/*" "venv/*"

          echo "‚úÖ Deployment package created"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: "vigor-backend"
          package: "./backend-deployment.zip"

      - name: Run database migrations
        run: |
          echo "üîÑ Running database migrations..."
          cd backend
          python -c "from database.init_db import init_database; init_database()"

  deploy-ai-functions:
    name: Build and Deploy AI Functions
    runs-on: ubuntu-latest
    needs: [backend-build, infrastructure-validate]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "./backend/requirements.txt"

      - name: Prepare Functions Code
        run: |
          echo "üîß Preparing AI Functions code..."
          mkdir -p functions
          cp -r backend/core/ai.py functions/
          cp -r backend/core/llm_providers.py functions/

          # Create requirements.txt for Functions
          cat > functions/requirements.txt << EOL
          azure-functions
          openai>=1.3.0
          google-generativeai>=0.3.0
          anthropic>=0.7.0
          langchain>=0.1.0
          langchain-community>=0.0.10
          pydantic>=2.4.0
          python-dotenv>=1.0.0
          EOL

          # Create a simple function
          mkdir -p functions/GenerateWorkout

          # Create __init__.py
          cat > functions/GenerateWorkout/__init__.py << EOL
          import azure.functions as func
          import logging
          import json
          from ..ai import get_ai_response

          app = func.FunctionApp()

          @app.function_name(name="GenerateWorkout")
          @app.route(route="generate-workout")
          def generate_workout(req: func.HttpRequest) -> func.HttpResponse:
              logging.info('Python HTTP trigger function processed a request for workout generation.')

              try:
                  req_body = req.get_json()
              except ValueError:
                  return func.HttpResponse(
                      "Please pass user preferences in the request body",
                      status_code=400
                  )

              user_preferences = req_body.get('preferences')
              if not user_preferences:
                  return func.HttpResponse(
                      "Please provide user preferences",
                      status_code=400
                  )

              prompt = f"Create a personalized workout plan based on these preferences: {json.dumps(user_preferences)}"

              try:
                  workout_plan = get_ai_response(prompt)
                  return func.HttpResponse(
                      json.dumps({"workout": workout_plan}),
                      mimetype="application/json"
                  )
              except Exception as e:
                  logging.error(f"Error generating workout: {str(e)}")
                  return func.HttpResponse(
                      f"Error generating workout: {str(e)}",
                      status_code=500
                  )
          EOL

          # Create function.json
          cat > functions/GenerateWorkout/function.json << EOL
          {
            "bindings": [
              {
                "authLevel": "function",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "methods": ["post"]
              },
              {
                "type": "http",
                "direction": "out",
                "name": "$return"
              }
            ]
          }
          EOL

          # Create host.json
          cat > functions/host.json << EOL
          {
            "version": "2.0",
            "logging": {
              "applicationInsights": {
                "samplingSettings": {
                  "isEnabled": true,
                  "excludedTypes": "Request"
                }
              }
            },
            "extensionBundle": {
              "id": "Microsoft.Azure.Functions.ExtensionBundle",
              "version": "[3.*, 4.0.0)"
            }
          }
          EOL

          echo "‚úÖ Functions code preparation complete"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          package: ./functions
          respect-funcignore: true

  deploy-static-web-app:
    name: Deploy Static Web App
    runs-on: ubuntu-latest
    needs: [frontend-build, infrastructure-validate]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing frontend dependencies..."
          cd frontend
          npm ci

      - name: Build
        run: |
          echo "üî® Building frontend..."
          cd frontend
          npm run build

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Static Web App Deployment Token
        id: get-swa-token
        continue-on-error: true
        run: |
          echo "Getting deployment token for Static Web App..."

          # Check if Static Web App exists
          echo "Checking if Static Web App exists in resource group..."
          STATIC_APPS=$(az staticwebapp list \
            --resource-group vigor-rg \
            --query "length([*])" \
            --output tsv)

          if [ "$STATIC_APPS" == "0" ]; then
            echo "No Static Web Apps found in resource group. Creating a new one..."

            # Create a new Static Web App if none exists
            az staticwebapp create \
              --name ${{ env.STATIC_WEBAPP_NAME }} \
              --resource-group vigor-rg \
              --location "East US" \
              --sku Standard

            # Wait for the resource to be created
            echo "Waiting for Static Web App to be created..."
            sleep 30
          fi

          # Get the Static Web App name
          SWA_NAME=$(az staticwebapp list \
            --resource-group vigor-rg \
            --query "[0].name" \
            --output tsv)

          if [ -z "$SWA_NAME" ]; then
            echo "Static Web App not found. Using fallback name."
            SWA_NAME="${{ env.STATIC_WEBAPP_NAME }}"
          fi

          echo "Using Static Web App: $SWA_NAME"

          # Get the deployment token with retry logic
          echo "Getting deployment token..."
          MAX_RETRIES=3
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            SWA_TOKEN=$(az staticwebapp secrets list \
              --resource-group vigor-rg \
              --name $SWA_NAME \
              --query "properties.apiKey" \
              --output tsv 2>/dev/null)

            if [ -n "$SWA_TOKEN" ]; then
              # Mask the token in logs
              echo "::add-mask::$SWA_TOKEN"

              # Save to output
              echo "token=$SWA_TOKEN" >> $GITHUB_OUTPUT
              echo "token_exists=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Deployment token obtained successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Deployment token not found. Retrying in 15 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                sleep 15
              else
                echo "Failed to get deployment token after $MAX_RETRIES attempts."
                echo "token_exists=false" >> $GITHUB_OUTPUT
              fi
            fi
          done

      - name: Deploy to Static Web App using token
        id: deploy-to-swa-with-token
        if: steps.get-swa-token.outputs.token_exists == 'true'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get-swa-token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend/dist"
          api_location: ""
          output_location: ""
          skip_deploy_on_missing_secrets: true

      - name: Deploy to Static Web App using Azure CLI
        id: deploy-to-swa-with-cli
        if: steps.get-swa-token.outputs.token_exists != 'true'
        run: |
          echo "Deploying using Azure CLI as fallback..."

          # Get the Static Web App name
          SWA_NAME=$(az staticwebapp list \
            --resource-group vigor-rg \
            --query "[0].name" \
            --output tsv)

          if [ -z "$SWA_NAME" ]; then
            SWA_NAME="${{ env.STATIC_WEBAPP_NAME }}"
          fi

          # Create a zip file from the frontend build
          echo "Creating zip file from frontend build..."
          cd frontend/dist
          zip -r ../../frontend-dist.zip .
          cd ../..

          # Deploy using az staticwebapp cli
          echo "Uploading build files..."
          az staticwebapp upload \
            --name $SWA_NAME \
            --resource-group vigor-rg \
            --source frontend-dist.zip \
            --no-wait

          echo "Static Web App deployment initiated through Azure CLI"
