---
name: Auto-Merge Security Check

"on":
  pull_request:
    types: [labeled]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  validate-auto-merge-eligibility:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'auto-merge')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check role eligibility
        id: check-role
        run: |
          # Get the author of the PR
          AUTHOR="${{ github.event.pull_request.user.login }}"

          # Check if user is in the allowed team
          REPO_OWNER="${{ github.repository_owner }}"
          is_team_member=$(gh api \
            /orgs/$REPO_OWNER/teams/trusted-contributors/memberships/$AUTHOR \
            -q '.state' 2>/dev/null || echo "none")

          # Check if user is repo collaborator with write permission or higher
          REPO="${{ github.repository }}"
          is_collaborator=$(gh api \
            /repos/$REPO/collaborators/$AUTHOR/permission \
            -q '.permission' 2>/dev/null || echo "none")
          can_write=$([ "$is_collaborator" == "admin" ] ||
                     [ "$is_collaborator" == "write" ] ||
                     [ "$is_collaborator" == "maintain" ] &&
                     echo "true" || echo "false")

          if [[ "$is_team_member" == "active" || "$can_write" == "true" ]]; then
            echo "User $AUTHOR is authorized to use auto-merge label"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "User $AUTHOR is not authorized to use auto-merge label"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check modified paths
        id: check-paths
        run: |
          # Get modified files in PR
          REPO="${{ github.repository }}"
          PR_NUM="${{ github.event.pull_request.number }}"
          MODIFIED_FILES=$(gh api /repos/$REPO/pulls/$PR_NUM/files \
            -q '.[].filename')

          # Check for sensitive paths
          SENSITIVE_PATHS=("backend/core/security.py" "backend/core/config.py" \
                          ".github/workflows" "infrastructure" "scripts")
          SENSITIVE_MODIFIED=false

          for file in $MODIFIED_FILES; do
            for sensitive in "${SENSITIVE_PATHS[@]}"; do
              if [[ "$file" == $sensitive* ]]; then
                echo "Sensitive file modified: $file"
                SENSITIVE_MODIFIED=true
                break 2
              fi
            done
          done

          echo "sensitive_modified=$SENSITIVE_MODIFIED" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check CI status
        id: check-ci
        run: |
          # Get status of required checks
          PR_SHA="${{ github.event.pull_request.head.sha }}"

          # Wait for checks to complete (timeout after 2 minutes)
          timeout=120
          elapsed=0
          PR_NUM="${{ github.event.pull_request.number }}"
          while [ $elapsed -lt $timeout ]; do
            JQ='[.[] | select(.conclusion == null)] | length'
            pending_count=$(gh pr checks $PR_NUM --json name,conclusion,status|\
              jq "$JQ")

            if [ "$pending_count" -eq 0 ]; then
              break
            fi

            echo "Waiting for $pending_count checks... ($elapsed/${timeout}s)"
            sleep 10
            elapsed=$((elapsed + 10))
          done

          # Check if any required checks failed
          failed_checks=$(gh pr checks $PR_NUM --json name,conclusion | \
            jq '[.[] | select(.conclusion != "success" and
                              .conclusion != "skipped" and
                              .conclusion != null)] | map(.name)')

          if [ "$failed_checks" == "[]" ]; then
            echo "All checks passed!"
            echo "checks_passed=true" >> $GITHUB_OUTPUT
          else
            echo "Some checks failed: $failed_checks"
            echo "checks_passed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate auto-merge eligibility
        run: |
          AUTHORIZED="${{ steps.check-role.outputs.authorized }}"
          SENS_MOD="${{ steps.check-paths.outputs.sensitive_modified }}"
          CHECKS_PASSED="${{ steps.check-ci.outputs.checks_passed }}"
          PR_NUM="${{ github.event.pull_request.number }}"

          if [[ "$AUTHORIZED" != "true" ]]; then
            echo "::error::User is not authorized to use auto-merge label"
            gh pr edit $PR_NUM --remove-label "auto-merge"
            gh pr comment $PR_NUM \
              --body "❌ **Auto-merge removed**: Only trusted contributors"
            exit 1
          fi

          if [[ "$SENS_MOD" == "true" ]]; then
            echo "::error::PR modifies sensitive paths"
            gh pr edit $PR_NUM --remove-label "auto-merge"
            gh pr comment $PR_NUM \
              --body "❌ **Auto-merge removed**: PR modifies sensitive paths"
            exit 1
          fi

          if [[ "$CHECKS_PASSED" != "true" ]]; then
            echo "::error::Some CI checks are failing"
            gh pr edit $PR_NUM --remove-label "auto-merge"
            gh pr comment $PR_NUM \
              --body "❌ **Auto-merge removed**: All CI checks must pass first"
            exit 1
          fi

          # If we got here, the PR is eligible for auto-merge
          gh pr comment $PR_NUM \
            --body "✅ **Auto-merge validated**: PR eligible for auto-merge"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
