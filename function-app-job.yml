name: Build and Deploy AI Functions
    runs-on: ubuntu-latest
    needs: [build-backend, validate-infra]
    if: ${{ env.USE_DIRECT_DEPLOYMENT == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "./backend/requirements.txt"

      - name: Prepare Functions Code
        run: |
          echo "ðŸ”§ Preparing AI Functions code..."
          mkdir -p functions
          cp -r backend/core/ai.py functions/
          cp -r backend/core/llm_providers.py functions/

          # Create requirements.txt for Functions
          cat > functions/requirements.txt << EOL
          azure-functions
          openai>=1.3.0
          google-generativeai>=0.3.0
          anthropic>=0.7.0
          langchain>=0.1.0
          langchain-community>=0.0.10
          pydantic>=2.4.0
          python-dotenv>=1.0.0
          EOL

          # Create a simple function
          mkdir -p functions/GenerateWorkout

          # Create __init__.py
          cat > functions/GenerateWorkout/__init__.py << EOL
          import azure.functions as func
          import logging
          import json
          from ..ai import get_ai_response

          app = func.FunctionApp()

          @app.function_name(name="GenerateWorkout")
          @app.route(route="generate-workout")
          def generate_workout(req: func.HttpRequest) -> func.HttpResponse:
              logging.info('Python HTTP trigger function processed a request for workout generation.')

              try:
                  req_body = req.get_json()
              except ValueError:
                  return func.HttpResponse(
                      "Please pass user preferences in the request body",
                      status_code=400
                  )

              user_preferences = req_body.get('preferences')
              if not user_preferences:
                  return func.HttpResponse(
                      "Please provide user preferences",
                      status_code=400
                  )

              prompt = f"Create a personalized workout plan based on these preferences: {json.dumps(user_preferences)}"

              try:
                  workout_plan = get_ai_response(prompt)
                  return func.HttpResponse(
                      json.dumps({"workout": workout_plan}),
                      mimetype="application/json"
                  )
              except Exception as e:
                  logging.error(f"Error generating workout: {str(e)}")
                  return func.HttpResponse(
                      f"Error generating workout: {str(e)}",
                      status_code=500
                  )
          EOL

          # Create function.json
          cat > functions/GenerateWorkout/function.json << EOL
          {
            "bindings": [
              {
                "authLevel": "function",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "methods": ["post"]
              },
              {
                "type": "http",
                "direction": "out",
                "name": "$return"
              }
            ]
          }
          EOL

          # Create host.json
          cat > functions/host.json << EOL
          {
            "version": "2.0",
            "logging": {
              "applicationInsights": {
                "samplingSettings": {
                  "isEnabled": true,
                  "excludedTypes": "Request"
                }
              }
            },
            "extensionBundle": {
              "id": "Microsoft.Azure.Functions.ExtensionBundle",
              "version": "[3.*, 4.0.0)"
            }
          }
          EOL

          echo "âœ… Functions code preparation complete"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          package: ./functions
          respect-funcignore: true
