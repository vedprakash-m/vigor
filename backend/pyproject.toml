[tool.bandit]
# Bandit security linting configuration
exclude_dirs = ["tests", "venv", "__pycache__", "alembic/versions"]
skips = [
    "B101",  # Skip assert_used test (common in tests)
    "B608",  # Skip SQL injection warnings for SQLAlchemy (handled by ORM)
]

[tool.bandit.assert_used]
skips = ["**/tests/**", "**/test_*.py"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | alembic/versions
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "api", "core", "database", "domain", "infrastructure", "application"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/migrations/*", "*/venv/*", "*/__pycache__/*"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["venv/", "alembic/versions/"]

[tool.ruff]
line-length = 88
target-version = "py312"
extend-exclude = ["venv", "__pycache__", "alembic/versions"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an except clause, raise exceptions with raise ... from err
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["F401", "F811"]  # Allow unused imports in tests

[tool.coverage.run]
source = ["app"]
omit = [
    "*/venv/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
