{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Vigor Fitness Platform - Complete Azure Infrastructure Template",
    "author": "Vigor Development Team"
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": ["dev", "staging", "prod"],
      "metadata": {
        "description": "Environment name for resource naming and configuration"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for resource deployment"
      }
    },
    "administratorLogin": {
      "type": "string",
      "metadata": {
        "description": "PostgreSQL administrator login name"
      }
    },
    "administratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL administrator password"
      }
    },
    "containerImageTag": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "Container image tag for deployment"
      }
    },
    "customDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom domain name (optional)"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat('vigor-', parameters('environment'))]",
    "storageAccountName": "[concat('vigorst', parameters('environment'), uniqueString(resourceGroup().id))]",
    "containerRegistryName": "[concat('vigorcr', parameters('environment'), uniqueString(resourceGroup().id))]",
    "appServicePlanName": "[concat(variables('resourcePrefix'), '-plan')]",
    "webAppName": "[concat(variables('resourcePrefix'), '-app')]",
    "postgresServerName": "[concat(variables('resourcePrefix'), '-postgres')]",
    "keyVaultName": "[concat(variables('resourcePrefix'), '-kv-', uniqueString(resourceGroup().id))]",
    "applicationInsightsName": "[concat(variables('resourcePrefix'), '-insights')]",
    "logAnalyticsName": "[concat(variables('resourcePrefix'), '-logs')]",
    "cdnProfileName": "[concat(variables('resourcePrefix'), '-cdn')]",
    "cdnEndpointName": "[concat(variables('resourcePrefix'), '-cdn-endpoint')]",
    "frontDoorName": "[concat(variables('resourcePrefix'), '-fd')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "defaultAction": "Allow"
        }
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[variables('containerRegistryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2023-06-01-preview",
      "name": "[variables('postgresServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_B1ms",
        "tier": "Burstable"
      },
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorPassword')]",
        "version": "15",
        "storage": {
          "storageSizeGB": 32
        },
        "backup": {
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled"
        },
        "highAvailability": {
          "mode": "Disabled"
        },
        "maintenanceWindow": {
          "customWindow": "Enabled",
          "dayOfWeek": 0,
          "startHour": 2,
          "startMinute": 0
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2023-06-01-preview",
      "name": "[concat(variables('postgresServerName'), '/vigor')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))]"
      ],
      "properties": {
        "charset": "utf8",
        "collation": "en_US.utf8"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "enableRbacAuthorization": true
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "searchVersion": 1,
          "legacy": 0,
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "B1",
        "tier": "Basic",
        "size": "B1",
        "family": "B",
        "capacity": 1
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "kind": "app,linux,container",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "[concat('DOCKER|', variables('containerRegistryName'), '.azurecr.io/vigor:', parameters('containerImageTag'))]",
          "alwaysOn": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "ENVIRONMENT",
              "value": "[parameters('environment')]"
            },
            {
              "name": "DATABASE_URL",
              "value": "[concat('postgresql://', parameters('administratorLogin'), ':', parameters('administratorPassword'), '@', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))).fullyQualifiedDomainName, ':5432/vigor')]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
            },
            {
              "name": "AZURE_KEY_VAULT_URL",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[concat('https://', variables('containerRegistryName'), '.azurecr.io')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[variables('containerRegistryName')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-07-01').passwords[0].value]"
            },
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "WEBSITES_PORT",
              "value": "8000"
            }
          ],
          "healthCheckPath": "/health"
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2023-05-01",
      "name": "[variables('cdnProfileName')]",
      "location": "Global",
      "sku": {
        "name": "Standard_Microsoft"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Cdn/profiles/endpoints",
      "apiVersion": "2023-05-01",
      "name": "[concat(variables('cdnProfileName'), '/', variables('cdnEndpointName'))]",
      "location": "Global",
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]",
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ],
      "properties": {
        "originHostHeader": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName'))).defaultHostName]",
        "isHttpAllowed": false,
        "isHttpsAllowed": true,
        "queryStringCachingBehavior": "IgnoreQueryString",
        "origins": [
          {
            "name": "vigor-origin",
            "properties": {
              "hostName": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName'))).defaultHostName]",
              "httpPort": 80,
              "httpsPort": 443,
              "originHostHeader": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName'))).defaultHostName]",
              "priority": 1,
              "weight": 1000,
              "enabled": true
            }
          }
        ],
        "deliveryPolicy": {
          "rules": [
            {
              "name": "CacheStaticAssets",
              "order": 1,
              "conditions": [
                {
                  "name": "UrlFileExtension",
                  "parameters": {
                    "operator": "Equal",
                    "matchValues": [
                      "css",
                      "js",
                      "png",
                      "jpg",
                      "jpeg",
                      "gif",
                      "svg",
                      "ico",
                      "woff",
                      "woff2",
                      "ttf",
                      "eot"
                    ],
                    "negateCondition": false,
                    "transforms": []
                  }
                }
              ],
              "actions": [
                {
                  "name": "CacheExpiration",
                  "parameters": {
                    "cacheBehavior": "SetIfMissing",
                    "cacheType": "All",
                    "cacheDuration": "30.00:00:00"
                  }
                }
              ]
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "webAppUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('webAppName'))).defaultHostName)]"
    },
    "cdnEndpointUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Cdn/profiles/endpoints', variables('cdnProfileName'), variables('cdnEndpointName'))).hostName)]"
    },
    "databaseConnectionString": {
      "type": "string",
      "value": "[concat('postgresql://', parameters('administratorLogin'), '@', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))).fullyQualifiedDomainName, ':5432/vigor')]"
    },
    "applicationInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
    },
    "keyVaultUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
    },
    "containerRegistryUrl": {
      "type": "string",
      "value": "[concat(variables('containerRegistryName'), '.azurecr.io')]"
    }
  }
}
